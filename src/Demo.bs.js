// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var OutOfBound = /* @__PURE__ */Caml_exceptions.create("Demo-Tictactoe.OutOfBound");

function displayPlayer(player) {
  if (player) {
    return "X";
  } else {
    return "O";
  }
}

function getPos(board, pos) {
  return List.nth(List.nth(board, pos[0]), pos[1]);
}

function isWin(board, player) {
  var checkCondition = function (condition) {
    return List.for_all((function (pos) {
                  return getPos(board, pos) === (
                          player ? "X" : "O"
                        );
                }), condition);
  };
  return List.exists(checkCondition, {
              hd: {
                hd: [
                  0,
                  0
                ],
                tl: {
                  hd: [
                    0,
                    1
                  ],
                  tl: {
                    hd: [
                      0,
                      2
                    ],
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: [
                    1,
                    0
                  ],
                  tl: {
                    hd: [
                      1,
                      1
                    ],
                    tl: {
                      hd: [
                        1,
                        2
                      ],
                      tl: /* [] */0
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: [
                      2,
                      0
                    ],
                    tl: {
                      hd: [
                        2,
                        1
                      ],
                      tl: {
                        hd: [
                          2,
                          2
                        ],
                        tl: /* [] */0
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: [
                        0,
                        0
                      ],
                      tl: {
                        hd: [
                          1,
                          0
                        ],
                        tl: {
                          hd: [
                            2,
                            0
                          ],
                          tl: /* [] */0
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: [
                          0,
                          1
                        ],
                        tl: {
                          hd: [
                            1,
                            1
                          ],
                          tl: {
                            hd: [
                              2,
                              1
                            ],
                            tl: /* [] */0
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: [
                            0,
                            2
                          ],
                          tl: {
                            hd: [
                              1,
                              2
                            ],
                            tl: {
                              hd: [
                                2,
                                2
                              ],
                              tl: /* [] */0
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: [
                              0,
                              0
                            ],
                            tl: {
                              hd: [
                                1,
                                1
                              ],
                              tl: {
                                hd: [
                                  2,
                                  2
                                ],
                                tl: /* [] */0
                              }
                            }
                          },
                          tl: {
                            hd: {
                              hd: [
                                0,
                                2
                              ],
                              tl: {
                                hd: [
                                  1,
                                  1
                                ],
                                tl: {
                                  hd: [
                                    2,
                                    0
                                  ],
                                  tl: /* [] */0
                                }
                              }
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  }
                }
              }
            });
}

function updateBoard(board, move) {
  var match = move[1];
  var y = match[1];
  var x = match[0];
  var player = move[0];
  return List.mapi((function (rowIndex, row) {
                if (rowIndex === x) {
                  return List.mapi((function (colIndex, value) {
                                if (colIndex === y) {
                                  if (player) {
                                    return "X";
                                  } else {
                                    return "O";
                                  }
                                } else {
                                  return value;
                                }
                              }), row);
                } else {
                  return row;
                }
              }), board);
}

function proceedGame(gameState, newMove) {
  var newBoard = updateBoard(gameState.board, [
        gameState.currentPlayer,
        newMove
      ]);
  return {
          currentPlayer: gameState.currentPlayer === /* Black */1 ? /* White */0 : /* Black */1,
          history: List.append(gameState.history, {
                hd: [
                  gameState.currentPlayer,
                  newMove
                ],
                tl: /* [] */0
              }),
          board: newBoard,
          won: isWin(newBoard, gameState.currentPlayer)
        };
}

function renderBoard(board) {
  var combineColumns = function (param) {
    return $$String.concat("", param);
  };
  return $$String.concat("\n", List.map(combineColumns, board));
}

function renderGame(gameState) {
  return renderBoard(gameState.board);
}

function startGame(param) {
  var initialGameState_board = {
    hd: {
      hd: "_",
      tl: {
        hd: "_",
        tl: {
          hd: "_",
          tl: /* [] */0
        }
      }
    },
    tl: {
      hd: {
        hd: "_",
        tl: {
          hd: "_",
          tl: {
            hd: "_",
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: "_",
          tl: {
            hd: "_",
            tl: {
              hd: "_",
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }
  };
  var initialGameState = {
    currentPlayer: /* White */0,
    history: /* [] */0,
    board: initialGameState_board,
    won: false
  };
  var moves = {
    hd: [
      /* White */0,
      [
        1,
        1
      ]
    ],
    tl: {
      hd: [
        /* Black */1,
        [
          0,
          1
        ]
      ],
      tl: {
        hd: [
          /* White */0,
          [
            1,
            2
          ]
        ],
        tl: {
          hd: [
            /* Black */1,
            [
              2,
              2
            ]
          ],
          tl: {
            hd: [
              /* White */0,
              [
                1,
                0
              ]
            ],
            tl: /* [] */0
          }
        }
      }
    }
  };
  var index = 0;
  var $$break = false;
  var gameState = initialGameState;
  console.log("Starting Game");
  while(List.length(gameState.history) > 9 || index < List.length(moves)) {
    var match = List.nth(moves, index);
    var match$1 = match[1];
    var y = match$1[1];
    var x = match$1[0];
    gameState = proceedGame(gameState, [
          x,
          y
        ]);
    console.log("Player<" + ((
            match[0] ? "X" : "O"
          ) + ("> placed position<" + (String(x) + ("," + (String(y) + ">."))))));
    console.log(renderBoard(gameState.board));
    console.log("========================");
    if (gameState.won) {
      $$break = true;
    }
    index = index + 1 | 0;
  };
  if (gameState.won) {
    var player = gameState.currentPlayer ? /* White */0 : /* Black */1;
    console.log("Winner is: " + ((
            player ? "X" : "O"
          ) + "!"));
    return ;
  }
  console.log("No one won!");
  
}

startGame(undefined);

exports.OutOfBound = OutOfBound;
exports.displayPlayer = displayPlayer;
exports.getPos = getPos;
exports.isWin = isWin;
exports.updateBoard = updateBoard;
exports.proceedGame = proceedGame;
exports.renderBoard = renderBoard;
exports.renderGame = renderGame;
exports.startGame = startGame;
/*  Not a pure module */
